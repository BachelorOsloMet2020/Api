# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

variables:
  phpVersion: 7.2

steps:


#- task: DownloadSecureFile@1
#  name: "azureSSH"
#  displayName: "Aquiering SSH Key"
#  inputs:
#    secureFile: "azureDeploy.pem"

#- task: InstallSSHKey@0
#  inputs:
#    knownHostsEntry: "|1|P7bx0b6HyyS3oGplKVNw0RLJxns=|aPk4+4z6irgHuscF/OkRMuE4Hhs= ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBHjE08mGkgQNPAO21EvnaiyKCkCBN4dukT6sKJg0vt9FW8HhQiaANflZZwyjtgt9ALyY9pQ6ldMdnmjDz1Gt2nM="
#    sshPublicKey: "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCmzl9qbfKTtIPTQd/QGtgreXNliAaxmSh5QQp6jG54DOEiTyuGULmJ5XQN/kndrAHQnqROQ87X1R5OHKaJ6z0A9iJNE0n+sGzILU8xeJ2fKLQfGF8kbSrkBvft8vGTJLXSih2GpDI5gvagBVQUQ/Mb0PSK8KrARnCY20SE2hclG5WM4aMVvl/b2o4sHQouxtjlvToX/Dt2btxg2gGGb4YjNdQhVK2+AjDioejP/YotWpUNxluJTAI/cF85WkFhfydLyZL0j1rI1yrVzzw0eTVghqK+VG3vBWOP4NRo/00mniv9baYx9X/5CfzaYx12yNNt7Cd2dfRcprrdrNG6g9sn azure@webserver"
#    #sshPassphrase: # Optional
#   sshKeySecureFile: '$(azureSSH.secureFilePath)'

#- script: |
#    sudo update-alternatives --set php /usr/bin/php$(phpVersion)
#    sudo update-alternatives --set phar /usr/bin/phar$(phpVersion)
#    sudo update-alternatives --set phpdbg /usr/bin/phpdbg$(phpVersion)
#    sudo update-alternatives --set php-cgi /usr/bin/php-cgi$(phpVersion)
#    sudo update-alternatives --set phar.phar /usr/bin/phar.phar$(phpVersion)
#    php -version
#  displayName: 'Use PHP version $(phpVersion)'

#- script: composer install --no-interaction --prefer-dist
#  displayName: 'composer install'

- script: phpunit --coverage-clover result.xml --log-junit test-result.xml
  displayName: 'Run tests with phpunit'
  continueOnError: true

- task: PowerShell@2
  displayName: "Re-map"
  inputs:
    targetType: inline
    #workingDirectory: ''
    script: |
      [string[]]$excludes = @("*.md", "*.yaml", "composer.json", ".git")
      $Items = Get-ChildItem -Path $(Build.SourcesDirectory) -Exclude $excludes
      New-Item -Path $(Build.SourcesDirectory) -Name "Artifacts" -ItemType "directory"
      $ArtifactsDirectory = Join-Path -Path $(Build.SourcesDirectory) -ChildPath "Artifacts"
      $Items | Copy-Item -Destination $ArtifactsDirectory -Recurse -Container -Verbose

      Write-Host $ArtifactsDirectory
      Write-Host "##vso[task.setvariable variable=ArtifactsDirectory]$ArtifactsDirectory"
      Get-ChildItem -Path $ArtifactsDirectory -Recurse
      Write-Host $(ArtifactsDirectory)



#- task: PublishBuildArtifacts@1
#  displayName: 'Publish artifact: drop'
#  inputs:
#    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
#  #condition: succeededOrFailed()
#  continueOnError: true

#- task: CopyFilesOverSSH@0
#  inputs:
#    sshEndpoint: 'Dyrebar_Deploy'
#   targetFolder: '/var/www/html'
#    sourceFolder: '$(Agent.ArtifactStagingDirectory)/s'
#    contents: '**'
#   overwrite: true
#   failOnEmptySource: true
#  continueOnError: true