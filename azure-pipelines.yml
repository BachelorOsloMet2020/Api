# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

variables:
  phpVersion: 7.2

steps:

- task: ado-discord-webhook@1
  displayName: 'Build Starting Notification'
  inputs:
    channelId: '669857560421203968'
    webhookKey: 'CBD4pj1TW5Z9UN5IGSf1rzra5jYt1yCqO6kQDbDVF_PpftUdCFo7Z3-L9baWKqXz3fnS'
    messageType: 'content'
    content: 'Starting Api Build'
  continueOnError: true

- script: |
    sudo update-alternatives --set php /usr/bin/php$(phpVersion)
    sudo update-alternatives --set phar /usr/bin/phar$(phpVersion)
    sudo update-alternatives --set phpdbg /usr/bin/phpdbg$(phpVersion)
    sudo update-alternatives --set php-cgi /usr/bin/php-cgi$(phpVersion)
    sudo update-alternatives --set phar.phar /usr/bin/phar.phar$(phpVersion)
    php -version
  displayName: 'Use PHP version $(phpVersion)'

- script: composer install --no-interaction --prefer-dist
  displayName: 'composer install'

- script: |
    phpunit --version
    phpunit tests/.  --coverage-clover result.xml --log-junit test-result.xml
  displayName: 'Run tests with phpunit'
  continueOnError: true

- task: PowerShell@2
  displayName: "Re-map"
  inputs:
    targetType: inline
    #workingDirectory: ''
    script: |
      [string[]]$excludes = @("*.md", "*.yml", "composer.json", "composer.lock", ".git", "azure-pipelines.yml", "vendor")
      $Items = Get-ChildItem -Path $(Build.SourcesDirectory) -Exclude $excludes
      New-Item -Path $(Build.SourcesDirectory) -Name "Artifacts" -ItemType "directory"
      $ArtifactsDirectory = Join-Path -Path $(Build.SourcesDirectory) -ChildPath "Artifacts"
      $Items | Copy-Item -Destination $ArtifactsDirectory -Recurse -Container -Verbose

      Write-Host $ArtifactsDirectory
      Write-Host "##vso[task.setvariable variable=ArtifactsDirectory]$ArtifactsDirectory"
      Get-ChildItem -Path $ArtifactsDirectory -Recurse

#- task: PublishBuildArtifacts@1
#  displayName: 'Publish artifact: drop'
#  inputs:
#    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
#  #condition: succeededOrFailed()
#  continueOnError: true

- task: ado-discord-webhook@1
  displayName: 'SSH Copy Starting Notification'
  inputs:
    channelId: '669857560421203968'
    webhookKey: 'CBD4pj1TW5Z9UN5IGSf1rzra5jYt1yCqO6kQDbDVF_PpftUdCFo7Z3-L9baWKqXz3fnS'
    messageType: 'content'
    content: 'Beginning to deploy API to server'
  continueOnError: true


- task: CopyFilesOverSSH@0
  inputs:
    sshEndpoint: 'Dyrebar_Deploy'
    targetFolder: '/var/www/html/api'
    sourceFolder: '$(ArtifactsDirectory)'
    contents: '**'
    overwrite: true
    failOnEmptySource: true
  continueOnError: true

- task: ado-discord-webhook@1
  displayName: 'SSH Copy ended Notification'
  inputs:
    channelId: '669857560421203968'
    webhookKey: 'CBD4pj1TW5Z9UN5IGSf1rzra5jYt1yCqO6kQDbDVF_PpftUdCFo7Z3-L9baWKqXz3fnS'
    messageType: 'content'
    content: 'API has been deployed'
  continueOnError: true
